# Pipeline consists of 4 jobs
# - Build_an_Test:
#   - Checks formatting
#   - Builds the project
#   - Runs all the tests
#   - Creates a NuGet package
# - Publish_to_MyGet:
#   - Pushes the NuGet package to MyGet
#   - Assumes a Service Connection for MyGet was set up in the Team project running the pipeline
#   - The name of the service connection is stored in the variable myget_ServiceConnectionName (defined below)
#   - Only runs when building a release branch or the 'master' branch
# - Publish_to_NuGet_org
#   - Pushes the NuGet package to NuGet.org
#   - Assumes a Service Connection for NuGet was set up in the Team project running the pipeline
#   - The name of the service connection is stored in the variable nuget_org_ServiceConnectionName (defined below)
#   - The variable nuget_org_PackageName defines which package is produced by the pipeline
# - Create_GitHub_Release
#   - Creates a GitHub release for the build
#   - Only runs when building the a release branch and publishing to nuget.org succeeded
# - Create_GitHub_Draft_Release
#   - Creates a *DRAFT* release on GitHub
#   - Only runs when building the 'master' branch

trigger:
  - master
  - release/*

pr:
  - master
  - release/*

variables:
  # Build settings
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE : true    # do not populate NuGet caches on build agents (VM will be deleted afterwards anyways)  
  artifactsName_Binaries: Binaries
  artifactsName_ChangeLog: ChangeLog
  artifactsName_Variables: Variables

  # MyGet.org settings
  myget_ServiceConnectionName: 'MyGet - ap0llo-changelog'  # the name of the Azure DevOps service connection to use for MyGet.org

  # NuGet.org settings
  nuget_org_ServiceConnectionName: 'NuGet.org - changelog' # the name of the Azure DevOps service connection to use for NuGet.org
  nuget_org_PackageName: 'Grynwald.ChangeLog'              # the name of the package being published

  # GitHub settings
  github_ServiceConnectionName: 'GitHub: ap0llo'      # the name of the Azure DevOps service connection to use for creating GitHub releases
  github_repositoryName: 'ap0llo/changelog'           # the name of the github repo to create the release in

  # Azure DevOps agent settings
  azuredevops_vmimage: windows-latest

jobs:

# Main Build and test job: Builds the projects and runs all tests
- job: Build_and_Test
  displayName: Build and Test
  pool:
    vmImage: $(azuredevops_vmimage)
  steps:

  # Install .NET Core SDK and runtime (version specified in global.json)
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK'
    inputs:
      packageType: sdk
      useGlobalJson: true

  # Also install .NET Core 2.1 runtime because we test against both .NET Core 3.1 and 2.1
  - task: UseDotNet@2
    displayName: 'Install .NET Core 2.1 runtime'
    inputs:
      packageType: runtime
      version: 2.1.x

  - powershell: ./build.ps1 Restore
    displayName: Restore

  - powershell: ./build.ps1 Build --no-restore
    displayName: Build

  - powershell: ./build.ps1 Test --no-build
    displayName: Test

  - powershell: ./build.ps1 Pack --no-build
    displayName: Pack

  # Generate changelog and publish as build artifact
  - task: DotNetCoreCLI@2
    displayName: Generate Change Log
    inputs:
      command: run
      arguments: >-
        --project ./src/ChangeLog/Grynwald.ChangeLog.csproj
        --framework netcoreapp3.1
        --repository $(Build.SourcesDirectory)
        --currentVersion $(NBGV_NuGetPackageVersion)
        --versionRange [$(NBGV_NuGetPackageVersion)]
        --outputpath $(Build.StagingDirectory)/changelog.md
        --template GitHubRelease
        --verbose
    env:
      CHANGELOG__INTEGRATIONS__GITHUB__ACCESSTOKEN: $(GitHub.AccessToken)

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts: $(artifactsName_ChangeLog)'
    inputs:
      pathToPublish: $(Build.StagingDirectory)/changelog.md
      artifactName: $(artifactsName_ChangeLog)

# Job to push package to MyGet.org after build
- job: Publish_to_MyGet
  displayName: Publish to MyGet
  pool:
    vmImage: $(azuredevops_vmimage)
  # Only run after main build job and only if the current branch is master or a release branch
  dependsOn: Build_and_Test
  condition: and(succeeded('Build_and_Test'), or(eq(variables['build.sourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/') ))
  steps:

  # Skip checkout of sources, all data required for this step can be laoded from the previous job's artifacts
  - checkout: none

  # Get artifacts
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Artifacts: $(artifactsName_Binaries)'
    inputs:
      buildType: current
      downloadType: single
      artifactName: $(artifactsName_Binaries)
      downloadPath: $(Build.ArtifactStagingDirectory)

  # Upload to MyGet.org
  - task: NuGetCommand@2
    displayName: "Upload package"
    inputs:
      command: push
      nugetFeedType: external
      publishFeedCredentials: $(myget_ServiceConnectionName)

# Job to push package to NuGet.org after build (only for builds of release branches)
- job: Publish_to_NuGet_org
  displayName: Publish to NuGet.org
  pool:
    vmImage: $(azuredevops_vmimage)
  # Only run after main build job and only if the current branch is a release branch
  dependsOn: Build_and_Test
  condition: |
    and
    (
      succeeded('Build_and_Test'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')
    )
  steps:

  # Skip checkout of sources, all data required for this step can be laoded from the previous job's artifacts
  - checkout: none

  # Get artifacts
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Artifacts: $(artifactsName_Binaries)'
    inputs:
      buildType: current
      downloadType: single
      artifactName: $(artifactsName_Binaries)
      downloadPath: $(Build.ArtifactStagingDirectory)

  # Upload to NuGet.org
  - task: NuGetCommand@2
    displayName: 'Upload package to NuGet.org'
    inputs:
      command: push
      nugetFeedType: external
      publishFeedCredentials: $(nuget_org_ServiceConnectionName)

# Job to create a GitHub release (only when building a release branch and the package was uploaded to NuGet.org)
- job: Create_GitHub_Release
  displayName: Create GitHub Release
  pool:
    vmImage: $(azuredevops_vmimage)
  # Only run if build was successful and a package was uploaded to nuget.org
  dependsOn:
  - Build_and_Test
  - Publish_to_NuGet_org
  condition: |
    and
    (
      succeeded('Publish_to_NuGet_org'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')
    )
  steps:

  # Skip checkout of sources, all data required for this step can be laoded from the previous job's artifacts
  - checkout: none

  # Get variables from Build job (the Build_an_Test job saves variables to a JSON files and publishes it as build artifact)
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Artifacts: $(artifactsName_Variables)'
    inputs:
      buildType: current
      downloadType: single
      artifactName: variables
      downloadPath: $(Build.ArtifactStagingDirectory)
  - powershell : |
      # Load variables JSON file generated during build
      $json = Get-Content -Raw "$(Build.ArtifactStagingDirectory)/$(artifactsName_Variables)/nbgv.json" | ConvertFrom-Json

      # for each variable, set the value as Azure Pipelines variable
      $variableNames = $json | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name
      foreach($variableName in $variableNames) {
        $value = $json."$variableName"
        Write-Host "Setting variable '$variableName' to '$value'"
        Write-Host "##vso[task.setvariable variable=$variableName]$value"
      }
    displayName: Load version variables

  # Get artifacts (Changelog and Binaries/packages)
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Artifacts: $(artifactsName_Binaries)'
    inputs:
      buildType: current
      downloadType: single
      artifactName: $(artifactsName_Binaries)
      downloadPath: $(Build.ArtifactStagingDirectory)
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Artifacts: $(artifactsName_ChangeLog)'
    inputs:
      buildType: current
      downloadType: single
      artifactName: $(artifactsName_ChangeLog)
      downloadPath: $(Build.ArtifactStagingDirectory)

  # Create GitHub release
  - task: GithubRelease@0
    displayName: Create GitHub Release
    inputs:
      gitHubConnection: $(github_ServiceConnectionName)
      repositoryName: $(github_repositoryName)
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: manual
      tag: v$(NBGV_NuGetPackageVersion)
      title: v$(NBGV_NuGetPackageVersion)
      releaseNotesSource: file
      releaseNotesFile: $(Build.ArtifactStagingDirectory)/$(artifactsName_ChangeLog)/changelog.md
      assets: $(Build.ArtifactStagingDirectory)/$(artifactsName_Binaries)/*.nupkg
      addChangeLog: false

# Job to create a GitHub *DRAFT* release (only when building the 'master' branch)
- job: Create_GitHub_Draft_Release
  displayName: Create GitHub DRAFT Release
  pool:
    vmImage: $(azuredevops_vmimage)
  # Only run if build was successful and a package was uploaded to nuget.org
  dependsOn:
  - Build_and_Test
  condition: eq(variables['build.sourceBranch'], 'refs/heads/master')

  steps:

  # Skip checkout of sources, all data required for this step can be laoded from the previous job's artifacts
  - checkout: none

  # Get variables from Build job (the Build_an_Test job saves variables to a JSON files and publishes it as build artifact)
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Artifacts: $(artifactsName_Variables)'
    inputs:
      buildType: current
      downloadType: single
      artifactName: variables
      downloadPath: $(Build.ArtifactStagingDirectory)
  - powershell : |
      # Load variables JSON file generated during build
      $json = Get-Content -Raw "$(Build.ArtifactStagingDirectory)/$(artifactsName_Variables)/nbgv.json" | ConvertFrom-Json

      # for each variable, set the value as Azure Pipelines variable
      $variableNames = $json | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name
      foreach($variableName in $variableNames) {
        $value = $json."$variableName"
        Write-Host "Setting variable '$variableName' to '$value'"
        Write-Host "##vso[task.setvariable variable=$variableName]$value"
      }
    displayName: Load version variables

  # Download changelog (gernated by the Build_and_Test job and published as build artifact)
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Artifacts: $(artifactsName_ChangeLog)'
    inputs:
      buildType: current
      downloadType: single
      artifactName: $(artifactsName_ChangeLog)
      downloadPath: $(Build.ArtifactStagingDirectory)

  # Create GitHub *DRAFT* release
  - task: GithubRelease@0
    displayName: Create GitHub Release
    inputs:
      gitHubConnection: $(github_ServiceConnectionName)
      repositoryName: $(github_repositoryName)
      action: 'edit'
      target: '$(Build.SourceVersion)'
      tagSource: manual
      tag: vNext
      title: v$(NBGV_NuGetPackageVersion)
      releaseNotesSource: file
      releaseNotesFile: $(Build.ArtifactStagingDirectory)/$(artifactsName_ChangeLog)/changelog.md
      addChangeLog: false
      isDraft: true
