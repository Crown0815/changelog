{{~
    defaultNamespace = configuration.get_scalar "changelog:messageOverrides:gitNotesNamespace" | html.escape
~}}
# Commit Message Overrides

**Supported versions:** 0.5+

By default, changelog parses commit messages to generate the change log.
Since the commit message in git cannot (easily) be changed after committing, the change log entry cannot be changed afterwards either.
To allow editing the message used for generating the change log, version 0.5 introduced the concept of "Commit Message Overrides".

It uses ["git notes"](https://git-scm.com/docs/git-notes) to set a message that takes precedence over a commit's message.

By default, the "override message" is read from the `{{defaultNamespace}}` namespace.
This can be customized through the [Git Notes Namespace setting](./configuration/settings/message-overrides.md#git-notes-namespace).

Note that when a git note is present, it **always** takes precedence over the commit message, regardless of whether the commit message and/or the override message can be parsed as conventional commit.

## Use Cases:

- **Modifying a change log entry:**

  Assuming a commit's message is a valid conventional commit, the resulting change log entry can be modified, by adding a git note that is a valid conventional commit message as well.

- **Adding a change log entry:**

  Commit messages which do not follow the conventional commits format will be ignored when generating the change log.
  To include the commit in the change log, add a git note which follows the conventional commits format.

- **Removing a change log entry**

  To remove a commit from the change log, add a git note that does *not* follow the conventional commits format.
  When generating the changelog, the commit will be ignored.

## Disabling Message Overrides

The commit message overrides are enabled by default. 
Overrides can be disabled by setting the ["Enable Message Overrides"](./configuration/settings/message-overrides.md#enable-message-overrides) setting to `false`.

## Working with Git Notes

For more information on git notes, please refer to the [Git Documentation](https://git-scm.com/docs/git-notes).

By default, changelog looks for override messages in the namespace `{{defaultNamespace}}`.
This can be customized through the [Git Notes Namespace setting](./configuration/settings/message-overrides.md#git-notes-namespace).

To add an override message, run

```ps1
git notes --ref "{{defaultNamespace}}" add "<COMMIT>"
```

where `<COMMIT>` is the SHA1 of the commit to add a note to.


Similarly, notes can be edited by running

```ps1
git notes --ref "{{defaultNamespace}}" edit "<COMMIT>"
```

or removed using 

```ps1
git notes --ref "{{defaultNamespace}}" remove "<COMMIT>"
```


To show message overrides in the output of `git log`, run 

```ps1
# Include "changelog message overrides" in the output of git log
git log --show-notes={{defaultNamespace}}

# Show *all* notes in the output of git log
git log --show-notes=*
```


## Pushing

**⚠️ Note that git does not include notes by default in push or pull operations**

To push git notes, run 

```ps1
# Fetch changelog message overrides
git push origin "refs/notes/{{defaultNamespace}}"

# Push all notes
git push origin "refs/notes/*"
```

Before generating the change log, ensure that git notes have been fetched into the local repository by running

```ps1
# Fetch notes for the message override namespace
git fetch origin "refs/notes/{{defaultNamespace}}:refs/notes/{{defaultNamespace}}"

# Fetch all notes
git fetch origin "refs/notes/*:refs/notes/*"
```

## See Also

- [Commit Message Override Settings](./configuration/settings/message-overrides.md)
- [Git Notes Documentation](https://git-scm.com/docs/git-notes)