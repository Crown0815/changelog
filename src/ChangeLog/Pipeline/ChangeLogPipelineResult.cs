using System;
using System.Collections.Generic;
using Grynwald.ChangeLog.Model;

namespace Grynwald.ChangeLog.Pipeline
{
    /// <summary>
    /// Encapsulates information about the execution of a <see cref="ChangeLogPipeline" />
    /// </summary>
    public sealed class ChangeLogPipelineResult
    {
        private readonly ApplicationChangeLog? m_ChangeLog;

        /// <summary>
        /// Gets whether the pipeline was executed successfully
        /// </summary>
        public bool Success { get; }

        /// <summary>
        /// Gets the results of all the tasks executed by the pipeline.
        /// </summary>
        public IReadOnlyList<ChangeLogTaskExecutionResult> ExecutedTasks { get; }

        /// <summary>
        /// Gets the tasks that weren't executed by the pipeline because it was aborted.
        /// </summary>
        public IReadOnlyList<IChangeLogTask> PendingTasks { get; }

        /// <summary>
        /// Gets the change log generated by the pipeline.
        /// </summary>
        public ApplicationChangeLog Value
        {
            get => Success ? m_ChangeLog! : throw new InvalidOperationException("Cannot access value of a error result");
        }


        private ChangeLogPipelineResult(
            bool success,
            IReadOnlyList<ChangeLogTaskExecutionResult> executedTasks,
            IReadOnlyList<IChangeLogTask> pendingTasks,
            ApplicationChangeLog? changelog)
        {
            Success = success;
            ExecutedTasks = executedTasks;
            PendingTasks = pendingTasks;
            m_ChangeLog = changelog;
        }


        public static ChangeLogPipelineResult CreateErrorResult(
            IReadOnlyList<ChangeLogTaskExecutionResult> executedTasks,
            IReadOnlyList<IChangeLogTask> pendingTasks)
        {
            if (executedTasks is null)
                throw new ArgumentNullException(nameof(executedTasks));

            if (pendingTasks is null)
                throw new ArgumentNullException(nameof(pendingTasks));

            return new ChangeLogPipelineResult(false, executedTasks, pendingTasks, null);
        }

        public static ChangeLogPipelineResult CreateSuccessResult(
            IReadOnlyList<ChangeLogTaskExecutionResult> executedTasks,
            IReadOnlyList<IChangeLogTask> pendingTasks,
            ApplicationChangeLog value)
        {
            if (executedTasks is null)
                throw new ArgumentNullException(nameof(executedTasks));

            if (pendingTasks is null)
                throw new ArgumentNullException(nameof(pendingTasks));

            if (value is null)
                throw new ArgumentNullException(nameof(value));

            return new ChangeLogPipelineResult(true, executedTasks, pendingTasks, value);
        }
    }
}
